/* tslint:disable */
/* eslint-disable */
/**
 * API Specification
 * クライアント-サーバー間のデータ通信仕様
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionType,
    InspectionTypeFromJSON,
    InspectionTypeToJSON,
} from '../models';

export interface InspectionTypesInspectionTypeIdDeleteRequest {
    inspectionTypeId: number;
}

export interface InspectionTypesInspectionTypeIdGetRequest {
    inspectionTypeId: number;
}

export interface InspectionTypesInspectionTypeIdPutRequest {
    inspectionTypeId: number;
    inspectionType?: InspectionType;
}

export interface InspectionTypesPostRequest {
    inspectionType?: InspectionType;
}

/**
 * InspectionTypesApi - interface
 * 
 * @export
 * @interface InspectionTypesApiInterface
 */
export interface InspectionTypesApiInterface {
    /**
     * 
     * @summary Get all inspection types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionTypesApiInterface
     */
    inspectionTypesGetRaw(): Promise<runtime.ApiResponse<Array<InspectionType>>>;

    /**
     * Get all inspection types.
     */
    inspectionTypesGet(): Promise<Array<InspectionType>>;

    /**
     * 
     * @summary Deletes the InspectionType model.
     * @param {number} inspectionTypeId inspection type ID to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionTypesApiInterface
     */
    inspectionTypesInspectionTypeIdDeleteRaw(requestParameters: InspectionTypesInspectionTypeIdDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the InspectionType model.
     */
    inspectionTypesInspectionTypeIdDelete(requestParameters: InspectionTypesInspectionTypeIdDeleteRequest): Promise<void>;

    /**
     * 
     * @summary Get InspectionType model by ID.
     * @param {number} inspectionTypeId inspection type ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionTypesApiInterface
     */
    inspectionTypesInspectionTypeIdGetRaw(requestParameters: InspectionTypesInspectionTypeIdGetRequest): Promise<runtime.ApiResponse<InspectionType>>;

    /**
     * Get InspectionType model by ID.
     */
    inspectionTypesInspectionTypeIdGet(requestParameters: InspectionTypesInspectionTypeIdGetRequest): Promise<InspectionType>;

    /**
     * 
     * @summary Updates the InspectionType model.
     * @param {number} inspectionTypeId inspection type ID to update
     * @param {InspectionType} [inspectionType] inspection type to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionTypesApiInterface
     */
    inspectionTypesInspectionTypeIdPutRaw(requestParameters: InspectionTypesInspectionTypeIdPutRequest): Promise<runtime.ApiResponse<InspectionType>>;

    /**
     * Updates the InspectionType model.
     */
    inspectionTypesInspectionTypeIdPut(requestParameters: InspectionTypesInspectionTypeIdPutRequest): Promise<InspectionType>;

    /**
     * 
     * @summary Create a new InspectionType model
     * @param {InspectionType} [inspectionType] inspection type to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionTypesApiInterface
     */
    inspectionTypesPostRaw(requestParameters: InspectionTypesPostRequest): Promise<runtime.ApiResponse<InspectionType>>;

    /**
     * Create a new InspectionType model
     */
    inspectionTypesPost(requestParameters: InspectionTypesPostRequest): Promise<InspectionType>;

}

/**
 * 
 */
export class InspectionTypesApi extends runtime.BaseAPI implements InspectionTypesApiInterface {

    /**
     * Get all inspection types.
     */
    async inspectionTypesGetRaw(): Promise<runtime.ApiResponse<Array<InspectionType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTypeFromJSON));
    }

    /**
     * Get all inspection types.
     */
    async inspectionTypesGet(): Promise<Array<InspectionType>> {
        const response = await this.inspectionTypesGetRaw();
        return await response.value();
    }

    /**
     * Deletes the InspectionType model.
     */
    async inspectionTypesInspectionTypeIdDeleteRaw(requestParameters: InspectionTypesInspectionTypeIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inspectionTypeId === null || requestParameters.inspectionTypeId === undefined) {
            throw new runtime.RequiredError('inspectionTypeId','Required parameter requestParameters.inspectionTypeId was null or undefined when calling inspectionTypesInspectionTypeIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types/{inspection_type_id}`.replace(`{${"inspection_type_id"}}`, encodeURIComponent(String(requestParameters.inspectionTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the InspectionType model.
     */
    async inspectionTypesInspectionTypeIdDelete(requestParameters: InspectionTypesInspectionTypeIdDeleteRequest): Promise<void> {
        await this.inspectionTypesInspectionTypeIdDeleteRaw(requestParameters);
    }

    /**
     * Get InspectionType model by ID.
     */
    async inspectionTypesInspectionTypeIdGetRaw(requestParameters: InspectionTypesInspectionTypeIdGetRequest): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.inspectionTypeId === null || requestParameters.inspectionTypeId === undefined) {
            throw new runtime.RequiredError('inspectionTypeId','Required parameter requestParameters.inspectionTypeId was null or undefined when calling inspectionTypesInspectionTypeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types/{inspection_type_id}`.replace(`{${"inspection_type_id"}}`, encodeURIComponent(String(requestParameters.inspectionTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Get InspectionType model by ID.
     */
    async inspectionTypesInspectionTypeIdGet(requestParameters: InspectionTypesInspectionTypeIdGetRequest): Promise<InspectionType> {
        const response = await this.inspectionTypesInspectionTypeIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates the InspectionType model.
     */
    async inspectionTypesInspectionTypeIdPutRaw(requestParameters: InspectionTypesInspectionTypeIdPutRequest): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.inspectionTypeId === null || requestParameters.inspectionTypeId === undefined) {
            throw new runtime.RequiredError('inspectionTypeId','Required parameter requestParameters.inspectionTypeId was null or undefined when calling inspectionTypesInspectionTypeIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-types/{inspection_type_id}`.replace(`{${"inspection_type_id"}}`, encodeURIComponent(String(requestParameters.inspectionTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Updates the InspectionType model.
     */
    async inspectionTypesInspectionTypeIdPut(requestParameters: InspectionTypesInspectionTypeIdPutRequest): Promise<InspectionType> {
        const response = await this.inspectionTypesInspectionTypeIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new InspectionType model
     */
    async inspectionTypesPostRaw(requestParameters: InspectionTypesPostRequest): Promise<runtime.ApiResponse<InspectionType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Create a new InspectionType model
     */
    async inspectionTypesPost(requestParameters: InspectionTypesPostRequest): Promise<InspectionType> {
        const response = await this.inspectionTypesPostRaw(requestParameters);
        return await response.value();
    }

}
