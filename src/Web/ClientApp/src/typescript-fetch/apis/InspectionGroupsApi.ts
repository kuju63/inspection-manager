/* tslint:disable */
/* eslint-disable */
/**
 * API Specification
 * クライアント-サーバー間のデータ通信仕様
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionGroup,
    InspectionGroupFromJSON,
    InspectionGroupToJSON,
} from '../models';

export interface InspectionGroupsInspectionGroupIdDeleteRequest {
    inspectionGroupId: number;
}

export interface InspectionGroupsInspectionGroupIdGetRequest {
    inspectionGroupId: number;
}

export interface InspectionGroupsInspectionGroupIdPutRequest {
    inspectionGroupId: number;
}

export interface InspectionGroupsPostRequest {
    inspectionGroup?: InspectionGroup;
}

/**
 * 
 */
export class InspectionGroupsApi extends runtime.BaseAPI {

    /**
     * Get all inspection groups.
     */
    async inspectionGroupsGetRaw(): Promise<runtime.ApiResponse<Array<InspectionGroup>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionGroupFromJSON));
    }

    /**
     * Get all inspection groups.
     */
    async inspectionGroupsGet(): Promise<Array<InspectionGroup>> {
        const response = await this.inspectionGroupsGetRaw();
        return await response.value();
    }

    /**
     * Deletes the InspectionGroup model.
     */
    async inspectionGroupsInspectionGroupIdDeleteRaw(requestParameters: InspectionGroupsInspectionGroupIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inspectionGroupId === null || requestParameters.inspectionGroupId === undefined) {
            throw new runtime.RequiredError('inspectionGroupId','Required parameter requestParameters.inspectionGroupId was null or undefined when calling inspectionGroupsInspectionGroupIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-groups/{inspection_group_id}`.replace(`{${"inspection_group_id"}}`, encodeURIComponent(String(requestParameters.inspectionGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the InspectionGroup model.
     */
    async inspectionGroupsInspectionGroupIdDelete(requestParameters: InspectionGroupsInspectionGroupIdDeleteRequest): Promise<void> {
        await this.inspectionGroupsInspectionGroupIdDeleteRaw(requestParameters);
    }

    /**
     * Get InspectionGroup model by ID.
     */
    async inspectionGroupsInspectionGroupIdGetRaw(requestParameters: InspectionGroupsInspectionGroupIdGetRequest): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.inspectionGroupId === null || requestParameters.inspectionGroupId === undefined) {
            throw new runtime.RequiredError('inspectionGroupId','Required parameter requestParameters.inspectionGroupId was null or undefined when calling inspectionGroupsInspectionGroupIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-groups/{inspection_group_id}`.replace(`{${"inspection_group_id"}}`, encodeURIComponent(String(requestParameters.inspectionGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * Get InspectionGroup model by ID.
     */
    async inspectionGroupsInspectionGroupIdGet(requestParameters: InspectionGroupsInspectionGroupIdGetRequest): Promise<InspectionGroup> {
        const response = await this.inspectionGroupsInspectionGroupIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates the InspectionGroup model.
     */
    async inspectionGroupsInspectionGroupIdPutRaw(requestParameters: InspectionGroupsInspectionGroupIdPutRequest): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.inspectionGroupId === null || requestParameters.inspectionGroupId === undefined) {
            throw new runtime.RequiredError('inspectionGroupId','Required parameter requestParameters.inspectionGroupId was null or undefined when calling inspectionGroupsInspectionGroupIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-groups/{inspection_group_id}`.replace(`{${"inspection_group_id"}}`, encodeURIComponent(String(requestParameters.inspectionGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * Updates the InspectionGroup model.
     */
    async inspectionGroupsInspectionGroupIdPut(requestParameters: InspectionGroupsInspectionGroupIdPutRequest): Promise<InspectionGroup> {
        const response = await this.inspectionGroupsInspectionGroupIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new InspectionGroup model
     */
    async inspectionGroupsPostRaw(requestParameters: InspectionGroupsPostRequest): Promise<runtime.ApiResponse<InspectionGroup>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionGroupToJSON(requestParameters.inspectionGroup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * Create a new InspectionGroup model
     */
    async inspectionGroupsPost(requestParameters: InspectionGroupsPostRequest): Promise<InspectionGroup> {
        const response = await this.inspectionGroupsPostRaw(requestParameters);
        return await response.value();
    }

}
